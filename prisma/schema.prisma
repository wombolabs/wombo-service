// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("COCKROACHDB_DATABASE_URL")
}

enum IdentityProvider {
  credentials
  discord
  google
  twitter
}

enum CoachCategory {
  general
  is_featured
  is_coming_out
}

enum VideoGameCategory {
  general
  is_featured
}

enum VideoSource {
  vimeo
  youtube
}

enum PaymentMethod {
  stripe
  paypal
  mercado_pago
}

enum Frequency {
  day
  week
  month
  year
}

enum Language {
  en
  es
  pt
}

enum PaymentType {
  one_time
  subscription
  donation
}

enum Currency {
  usd
}

model Video {
  id          String      @id(map: "primary") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?
  description String?
  source      VideoSource
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
}

model VideoGame {
  id        String            @id(map: "primary") @db.Uuid
  codename  String
  category  VideoGameCategory @default(general)
  isActive  Boolean           @default(true)
  coaches   Coach[]           @relation(references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  deletedAt DateTime?
}

model Coach {
  id              String        @id(map: "primary") @db.Uuid
  email           String        @unique
  username        String        @unique
  videoGames      VideoGame[]   @relation(references: [id])
  discord         Json? // {id, username, discriminator, accessToken, refreshToken, expireIn}
  discordJoinDate DateTime?
  languages       Language[]
  locale          Language?
  timeZone        String?
  tiers           Tier[]
  category        CoachCategory @default(general)
  isActive        Boolean       @default(false)
  lastLogin       DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
}

model Student {
  id              String    @id(map: "primary") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String    @unique
  username        String?   @unique
  displayName     String?
  password        String?
  discord         Json? // {id, username, discriminator, accessToken, refreshToken, expireIn, scope, verified}
  discordJoinDate DateTime?
  locale          Language?
  timeZone        String?
  orders          Order[]
  stripe          Json?
  isActive        Boolean   @default(true)
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

model Order {
  id                 String      @id(map: "primary") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student            Student     @relation(fields: [studentId], references: [id], map: "fk_studentId_ref_Student")
  studentId          String      @db.Uuid
  type               PaymentType
  payments           Payment[]
  stripe             Json?
  coachId            String?
  tierId             String?
  validFrom          DateTime?
  validTill          DateTime?
  billingInterval    Frequency?
  billingAmount      Float
  billingCurrency    Currency
  isCancelled        Boolean?
  cancellationReason String?
  livemode           Boolean     @default(true)
  isActive           Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  deletedAt          DateTime?
}

model Tier {
  id              String      @id(map: "primary") @db.Uuid
  coach           Coach?      @relation(fields: [coachId], references: [id], map: "fk_coachId_ref_Coach")
  coachId         String      @db.Uuid
  codename        String
  type            PaymentType
  price           Float
  currency        Currency
  billingInterval Frequency?
  language        Language
  discordRoleIds  String[]
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?
}

model Payment {
  id        String        @id(map: "primary") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order     Order         @relation(fields: [orderId], references: [id], map: "fk_orderId_ref_Order")
  orderId   String        @db.Uuid
  method    PaymentMethod
  amount    Float
  currency  Currency
  stripe    Json?
  livemode  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
}
