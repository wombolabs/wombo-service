service: wombo-api-service
useDotenv: true

plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-webpack-prisma
  - serverless-deployment-bucket
  - serverless-prune-plugin
  - serverless-api-gateway-caching
  - serverless-offline

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!prisma/**'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage}
  versionFunctions: false
  deploymentBucket:
    name: ${self:service}-${opt:stage}-deployment-bucket
    maxPreviousDeploymentArtifacts: 1
  apiGateway:
    minimumCompressionSize: 512 # Compress response when larger than specified size in bytes
    shouldStartNameWithService: true
    apiKeys:
      - name: ${env:SUBDOMAIN}-apiKey
        value: ${env:DEFAULT_API_KEY}
  environment:
    SUBDOMAIN: ${env:SUBDOMAIN}
    DEFAULT_API_KEY: ${env:DEFAULT_API_KEY}
    JWT_SECRET: ${env:JWT_SECRET}
    SENTRY_DSN: ${env:SENTRY_DSN}
    SENTRY_ENVIRONMENT: ${env:SENTRY_ENVIRONMENT}
    SENTRY_ERROR_RATE: ${env:SENTRY_ERROR_RATE}
    SENTRY_TRANSACTION_RATE: ${env:SENTRY_TRANSACTION_RATE}
    COCKROACHDB_DATABASE_URL: ${env:COCKROACHDB_DATABASE_URL}
    PRISMA_GENERATE_DATAPROXY: ${strToBool(${env:PRISMA_GENERATE_DATAPROXY, false})}
    CHECKPOINT_DISABLE: ${env:CHECKPOINT_DISABLE}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET}
    DISCORD_BOT_TOKEN: ${env:DISCORD_BOT_TOKEN}
    DISCORD_GUILD_WOMBO: ${env:DISCORD_GUILD_WOMBO}
    DISCORD_GUILD_CATEGORY_CHALLENGES: ${env:DISCORD_GUILD_CATEGORY_CHALLENGES}
    BOOKING_DATABASE_URL: ${env:BOOKING_DATABASE_URL}

custom:
  serverless-offline:
    apiKey: ${env:DEFAULT_API_KEY}
    httpPort: ${env:SERVERLESS_OFFLINE_HTTP_PORT, 8001}
    lambdaPort: ${env:SERVERLESS_OFFLINE_LAMBDA_PORT, 3001}
  webpack:
    includeModules: true
  prune:
    automatic: true
    includeLayers: true
    number: 0
  domainEnabled:
    local: false
    test: true
    staging: true
    production: true
  customDomain:
    enabled: ${self:custom.domainEnabled.${self:provider.stage}}
    domainName: ${env:SUBDOMAIN}.wombo.gg
    certificateName: 'wombo.gg'
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  competitionBotQueueEnabled:
    local: false
    test: false
    staging: false
    production: false
  apiGatewayCachingEnabled:
    local: false
    test: false
    staging: false
    production: true

functions:
  # Coaches
  listCoaches:
    handler: src/index.listCoachesHandler
    events:
      - http:
          path: /coaches
          method: get
          private: true
          caching:
            enabled: ${self:custom.apiGatewayCachingEnabled.${self:provider.stage}}
  getCoach:
    handler: src/index.getCoachHandler
    events:
      - http:
          path: /coaches/{username}
          method: get
          private: true
  # Students
  signinStudent:
    handler: src/index.signinStudentHandler
    events:
      - http:
          path: /students/signin
          method: post
          private: true
  signupStudent:
    handler: src/index.signupStudentHandler
    events:
      - http:
          path: /students/signup
          method: post
          private: true
  getStudent:
    handler: src/index.getStudentHandler
    events:
      - http:
          path: /students/{username}
          method: get
          private: true
  getStudentMe:
    handler: src/index.getStudentMeHandler
    events:
      - http:
          path: /students/me
          method: get
          private: true
  getStudentMeOrders:
    handler: src/index.getStudentMeOrdersHandler
    events:
      - http:
          path: /students/me/orders
          method: get
          private: true
  getStudentMeChallenges:
    handler: src/index.getStudentMeChallengesHandler
    events:
      - http:
          path: /students/me/challenges
          method: get
          private: true
  updateStudentMe:
    handler: src/index.updateStudentMeHandler
    events:
      - http:
          path: /students/me
          method: patch
          private: true
  # Me Wallet
  createWalletTransaction:
    handler: src/index.createWalletTransactionHandler
    events:
      - http:
          path: /students/me/transactions
          method: post
          private: true
  # Tiers
  getTier:
    handler: src/index.getTierHandler
    events:
      - http:
          path: /tiers/{id}
          method: get
          private: true
  listTiers:
    handler: src/index.listTiersHandler
    events:
      - http:
          path: /tiers
          method: get
          private: true
          caching:
            enabled: ${self:custom.apiGatewayCachingEnabled.${self:provider.stage}}
  # VideoGames
  listVideoGames:
    handler: src/index.listVideoGamesHandler
    events:
      - http:
          path: /videogames
          method: get
          private: true
          caching:
            enabled: ${self:custom.apiGatewayCachingEnabled.${self:provider.stage}}
  # Coupons
  getCoupon:
    handler: src/index.getCouponHandler
    events:
      - http:
          path: /coupons/{name}
          method: get
          private: true
  # Stripe
  stripeWebhook:
    handler: src/index.stripeWebhookHandler
    events:
      - http:
          path: /stripe/webhook
          method: post
          private: false
  # Booking
  bookingWebhook:
    handler: src/index.bookingWebhookHandler
    events:
      - http:
          path: /booking/webhook
          method: post
          private: true
  listBookingSessions:
    handler: src/index.listBookingSessionsHandler
    events:
      - http:
          path: /booking/sessions
          method: get
          private: true
          caching:
            enabled: ${self:custom.apiGatewayCachingEnabled.${self:provider.stage}}
  # Competition
  listCompetitions:
    handler: src/index.listCompetitionsHandler
    events:
      - http:
          path: /competitions
          method: get
          private: true
          caching:
            enabled: ${self:custom.apiGatewayCachingEnabled.${self:provider.stage}}
  getCompetition:
    handler: src/index.getCompetitionHandler
    events:
      - http:
          path: /competitions/{codename}
          method: get
          private: true
  listCompetitionLeaderboards:
    handler: src/index.listCompetitionLeaderboardsHandler
    events:
      - http:
          path: /competitions/{codename}/leaderboards
          method: get
          private: true
          caching:
            enabled: ${self:custom.apiGatewayCachingEnabled.${self:provider.stage}}
            ttlInSeconds: 1800
  enrollForCompetition:
    handler: src/index.enrollForCompetitionHandler
    events:
      - http:
          path: /competitions/{codename}/enroll
          method: post
          private: true
  # Challenge
  listChallenges:
    handler: src/index.listChallengesHandler
    events:
      - http:
          path: /challenges
          method: get
          private: true
          caching:
            enabled: ${self:custom.apiGatewayCachingEnabled.${self:provider.stage}}
  createChallenge:
    handler: src/index.createChallengeHandler
    events:
      - http:
          path: /challenges
          method: post
          private: true
  enrollForChallenge:
    handler: src/index.enrollForChallengeHandler
    events:
      - http:
          path: /challenges/{id}/enroll
          method: patch
          private: true
  getChallenge:
    handler: src/index.getChallengeHandler
    events:
      - http:
          path: /challenges/{id}
          method: get
          private: true
